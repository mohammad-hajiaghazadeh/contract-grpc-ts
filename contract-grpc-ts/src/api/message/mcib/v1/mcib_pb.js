/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var src_api_message_v1_common_pb = require('../../../../../src/api/message/v1/common_pb.js');
goog.object.extend(proto, src_api_message_v1_common_pb);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.Filter', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.FilterColumns', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.Mcib', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.McibHistory', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.Order', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.OrderColumns', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.PriceRange', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.Order.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.Filter.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.PriceRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.PriceRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.Mcib, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.Mcib.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.Mcib';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.McibHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.McibHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.repeatedFields_, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.displayName = 'proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isdesc: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Order}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.Order;
  return proto.trialblaze.api.contracts.message.mcib.v1.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Order}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.trialblaze.api.contracts.message.mcib.v1.OrderColumns} */ (reader.readEnum());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsdesc();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional OrderColumns Column = 1;
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.OrderColumns}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.prototype.getColumn = function() {
  return /** @type {!proto.trialblaze.api.contracts.message.mcib.v1.OrderColumns} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.trialblaze.api.contracts.message.mcib.v1.OrderColumns} value */
proto.trialblaze.api.contracts.message.mcib.v1.Order.prototype.setColumn = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool IsDesc = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Order.prototype.getIsdesc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.trialblaze.api.contracts.message.mcib.v1.Order.prototype.setIsdesc = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operation: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Filter}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.Filter;
  return proto.trialblaze.api.contracts.message.mcib.v1.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Filter}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.trialblaze.api.contracts.message.mcib.v1.FilterColumns} */ (reader.readEnum());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.trialblaze.api.contracts.message.v1.FilterOperation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumn();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional FilterColumns Column = 1;
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.FilterColumns}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.getColumn = function() {
  return /** @type {!proto.trialblaze.api.contracts.message.mcib.v1.FilterColumns} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.trialblaze.api.contracts.message.mcib.v1.FilterColumns} value */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.setColumn = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Value = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.FilterOperation Operation = 3;
 * @return {!proto.trialblaze.api.contracts.message.v1.FilterOperation}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.getOperation = function() {
  return /** @type {!proto.trialblaze.api.contracts.message.v1.FilterOperation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.trialblaze.api.contracts.message.v1.FilterOperation} value */
proto.trialblaze.api.contracts.message.mcib.v1.Filter.prototype.setOperation = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    pricemin: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    pricemax: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.PriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.PriceRange;
  return proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.PriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPricemin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPricemax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPricemin();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPricemax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float PriceMin = 1;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.prototype.getPricemin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.prototype.setPricemin = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float PriceMax = 2;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.prototype.getPricemax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.prototype.setPricemax = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.Mcib.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Mcib} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    country: (f = msg.getCountry()) && src_api_message_v1_common_pb.CountryRef.toObject(includeInstance, f),
    currency: (f = msg.getCurrency()) && src_api_message_v1_common_pb.CurrencyRef.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    effectivefrom: msg.getEffectivefrom_asB64(),
    effectiveto: msg.getEffectiveto_asB64(),
    updatedon: msg.getUpdatedon_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f),
    trial: (f = msg.getTrial()) && src_api_message_v1_common_pb.StudyRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Mcib}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.Mcib;
  return proto.trialblaze.api.contracts.message.mcib.v1.Mcib.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Mcib} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Mcib}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.CountryRef;
      reader.readMessage(value,src_api_message_v1_common_pb.CountryRef.deserializeBinaryFromReader);
      msg.setCountry(value);
      break;
    case 4:
      var value = new src_api_message_v1_common_pb.CurrencyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.CurrencyRef.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 5:
      var value = /** @type {!proto.trialblaze.api.contracts.message.v1.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectivefrom(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectiveto(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpdatedon(value);
      break;
    case 9:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    case 10:
      var value = new src_api_message_v1_common_pb.StudyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.StudyRef.deserializeBinaryFromReader);
      msg.setTrial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.Mcib.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Mcib} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.CountryRef.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      src_api_message_v1_common_pb.CurrencyRef.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getEffectivefrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getEffectiveto_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getUpdatedon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
  f = message.getTrial();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      src_api_message_v1_common_pb.StudyRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID Id = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getId = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.CountryRef Country = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.CountryRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getCountry = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.CountryRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.CountryRef, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.CountryRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setCountry = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.clearCountry = function() {
  this.setCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.CurrencyRef Currency = 4;
 * @return {?proto.trialblaze.api.contracts.message.v1.CurrencyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getCurrency = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.CurrencyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.CurrencyRef, 4));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.CurrencyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setCurrency = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.clearCurrency = function() {
  this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.Status Status = 5;
 * @return {!proto.trialblaze.api.contracts.message.v1.Status}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getStatus = function() {
  return /** @type {!proto.trialblaze.api.contracts.message.v1.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.trialblaze.api.contracts.message.v1.Status} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bytes EffectiveFrom = 6;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getEffectivefrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes EffectiveFrom = 6;
 * This is a type-conversion wrapper around `getEffectivefrom()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getEffectivefrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectivefrom()));
};


/**
 * optional bytes EffectiveFrom = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectivefrom()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getEffectivefrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectivefrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setEffectivefrom = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes EffectiveTo = 7;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getEffectiveto = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes EffectiveTo = 7;
 * This is a type-conversion wrapper around `getEffectiveto()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getEffectiveto_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectiveto()));
};


/**
 * optional bytes EffectiveTo = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectiveto()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getEffectiveto_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectiveto()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setEffectiveto = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes UpdatedOn = 8;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getUpdatedon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes UpdatedOn = 8;
 * This is a type-conversion wrapper around `getUpdatedon()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getUpdatedon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpdatedon()));
};


/**
 * optional bytes UpdatedOn = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpdatedon()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getUpdatedon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpdatedon()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setUpdatedon = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 9;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 9));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.StudyRef Trial = 10;
 * @return {?proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.getTrial = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.StudyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.StudyRef, 10));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.StudyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.setTrial = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.clearTrial = function() {
  this.setTrial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.Mcib.prototype.hasTrial = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.McibHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trial: (f = msg.getTrial()) && src_api_message_v1_common_pb.StudyRef.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    effectivefrom: msg.getEffectivefrom_asB64(),
    effectiveto: msg.getEffectiveto_asB64(),
    action: jspb.Message.getFieldWithDefault(msg, 7, ""),
    actiondate: msg.getActiondate_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.McibHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.McibHistory;
  return proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.McibHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.McibHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.StudyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.StudyRef.deserializeBinaryFromReader);
      msg.setTrial(value);
      break;
    case 4:
      var value = /** @type {!proto.trialblaze.api.contracts.message.v1.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectivefrom(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectiveto(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActiondate(value);
      break;
    case 9:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.McibHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrial();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.StudyRef.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEffectivefrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getEffectiveto_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getActiondate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 Id = 1;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.StudyRef Trial = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getTrial = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.StudyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.StudyRef, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.StudyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setTrial = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.clearTrial = function() {
  this.setTrial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.hasTrial = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.Status Status = 4;
 * @return {!proto.trialblaze.api.contracts.message.v1.Status}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getStatus = function() {
  return /** @type {!proto.trialblaze.api.contracts.message.v1.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.trialblaze.api.contracts.message.v1.Status} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes EffectiveFrom = 5;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getEffectivefrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes EffectiveFrom = 5;
 * This is a type-conversion wrapper around `getEffectivefrom()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getEffectivefrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectivefrom()));
};


/**
 * optional bytes EffectiveFrom = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectivefrom()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getEffectivefrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectivefrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setEffectivefrom = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes EffectiveTo = 6;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getEffectiveto = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes EffectiveTo = 6;
 * This is a type-conversion wrapper around `getEffectiveto()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getEffectiveto_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectiveto()));
};


/**
 * optional bytes EffectiveTo = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectiveto()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getEffectiveto_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectiveto()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setEffectiveto = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string Action = 7;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes ActionDate = 8;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getActiondate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes ActionDate = 8;
 * This is a type-conversion wrapper around `getActiondate()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getActiondate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActiondate()));
};


/**
 * optional bytes ActionDate = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActiondate()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getActiondate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActiondate()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setActiondate = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 9;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 9));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vdid: (f = msg.getVdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    pricerange: (f = msg.getPricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.toObject(includeInstance, f),
    updatedon: msg.getUpdatedon_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f),
    trial: (f = msg.getTrial()) && src_api_message_v1_common_pb.StudyRef.toObject(includeInstance, f),
    visitdefoid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange;
  return proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVdid(value);
      break;
    case 3:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.PriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinaryFromReader);
      msg.setPricerange(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpdatedon(value);
      break;
    case 5:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    case 6:
      var value = new src_api_message_v1_common_pb.StudyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.StudyRef.deserializeBinaryFromReader);
      msg.setTrial(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisitdefoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVdid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPricerange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
  f = message.getTrial();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      src_api_message_v1_common_pb.StudyRef.serializeBinaryToWriter
    );
  }
  f = message.getVisitdefoid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VdId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getVdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setVdid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.clearVdid = function() {
  this.setVdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.hasVdid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PriceRange PriceRange = 3;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getPricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.PriceRange, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setPricerange = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.clearPricerange = function() {
  this.setPricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.hasPricerange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes UpdatedOn = 4;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getUpdatedon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes UpdatedOn = 4;
 * This is a type-conversion wrapper around `getUpdatedon()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getUpdatedon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpdatedon()));
};


/**
 * optional bytes UpdatedOn = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpdatedon()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getUpdatedon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpdatedon()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setUpdatedon = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 5;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 5));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.StudyRef Trial = 6;
 * @return {?proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getTrial = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.StudyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.StudyRef, 6));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.StudyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setTrial = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.clearTrial = function() {
  this.setTrial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.hasTrial = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string VisitDefOId = 7;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.getVisitdefoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.prototype.setVisitdefoid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vdid: (f = msg.getVdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    pricerange: (f = msg.getPricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 5, ""),
    actiondate: msg.getActiondate_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f),
    trial: (f = msg.getTrial()) && src_api_message_v1_common_pb.StudyRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory;
  return proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVdid(value);
      break;
    case 4:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.PriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinaryFromReader);
      msg.setPricerange(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActiondate(value);
      break;
    case 7:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    case 8:
      var value = new src_api_message_v1_common_pb.StudyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.StudyRef.deserializeBinaryFromReader);
      msg.setTrial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVdid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPricerange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActiondate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
  f = message.getTrial();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      src_api_message_v1_common_pb.StudyRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 Id = 1;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VdId = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getVdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setVdid = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.clearVdid = function() {
  this.setVdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.hasVdid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PriceRange PriceRange = 4;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getPricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.PriceRange, 4));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setPricerange = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.clearPricerange = function() {
  this.setPricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.hasPricerange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string Action = 5;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes ActionDate = 6;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getActiondate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes ActionDate = 6;
 * This is a type-conversion wrapper around `getActiondate()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getActiondate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActiondate()));
};


/**
 * optional bytes ActionDate = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActiondate()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getActiondate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActiondate()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setActiondate = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 7;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 7));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.StudyRef Trial = 8;
 * @return {?proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.getTrial = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.StudyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.StudyRef, 8));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.StudyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.setTrial = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.clearTrial = function() {
  this.setTrial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.prototype.hasTrial = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vpdid: (f = msg.getVpdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    pricerange: (f = msg.getPricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.toObject(includeInstance, f),
    updatedon: msg.getUpdatedon_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f),
    trial: (f = msg.getTrial()) && src_api_message_v1_common_pb.StudyRef.toObject(includeInstance, f),
    procedureoid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    vdid: (f = msg.getVdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange;
  return proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVpdid(value);
      break;
    case 3:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.PriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinaryFromReader);
      msg.setPricerange(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpdatedon(value);
      break;
    case 5:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    case 6:
      var value = new src_api_message_v1_common_pb.StudyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.StudyRef.deserializeBinaryFromReader);
      msg.setTrial(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcedureoid(value);
      break;
    case 8:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVdid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVpdid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPricerange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
  f = message.getTrial();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      src_api_message_v1_common_pb.StudyRef.serializeBinaryToWriter
    );
  }
  f = message.getProcedureoid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVdid();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VpdId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getVpdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setVpdid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.clearVpdid = function() {
  this.setVpdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.hasVpdid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PriceRange PriceRange = 3;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getPricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.PriceRange, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setPricerange = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.clearPricerange = function() {
  this.setPricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.hasPricerange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes UpdatedOn = 4;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getUpdatedon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes UpdatedOn = 4;
 * This is a type-conversion wrapper around `getUpdatedon()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getUpdatedon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpdatedon()));
};


/**
 * optional bytes UpdatedOn = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpdatedon()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getUpdatedon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpdatedon()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setUpdatedon = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 5;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 5));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.StudyRef Trial = 6;
 * @return {?proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getTrial = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.StudyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.StudyRef, 6));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.StudyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setTrial = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.clearTrial = function() {
  this.setTrial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.hasTrial = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string ProcedureOId = 7;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getProcedureoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setProcedureoid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VdId = 8;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.getVdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 8));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.setVdid = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.clearVdid = function() {
  this.setVdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.prototype.hasVdid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vpdid: (f = msg.getVpdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    pricerange: (f = msg.getPricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 5, ""),
    actiondate: msg.getActiondate_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f),
    trial: (f = msg.getTrial()) && src_api_message_v1_common_pb.StudyRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory;
  return proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVpdid(value);
      break;
    case 4:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.PriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.deserializeBinaryFromReader);
      msg.setPricerange(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActiondate(value);
      break;
    case 7:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    case 8:
      var value = new src_api_message_v1_common_pb.StudyRef;
      reader.readMessage(value,src_api_message_v1_common_pb.StudyRef.deserializeBinaryFromReader);
      msg.setTrial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVpdid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPricerange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.PriceRange.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActiondate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
  f = message.getTrial();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      src_api_message_v1_common_pb.StudyRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 Id = 1;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VpdId = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getVpdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setVpdid = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.clearVpdid = function() {
  this.setVpdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.hasVpdid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PriceRange PriceRange = 4;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getPricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.PriceRange, 4));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.PriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setPricerange = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.clearPricerange = function() {
  this.setPricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.hasPricerange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string Action = 5;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes ActionDate = 6;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getActiondate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes ActionDate = 6;
 * This is a type-conversion wrapper around `getActiondate()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getActiondate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActiondate()));
};


/**
 * optional bytes ActionDate = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActiondate()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getActiondate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActiondate()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setActiondate = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 7;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 7));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.StudyRef Trial = 8;
 * @return {?proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.getTrial = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.StudyRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.StudyRef, 8));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.StudyRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.setTrial = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.clearTrial = function() {
  this.setTrial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.prototype.hasTrial = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trialid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderby: (f = msg.getOrderby()) && proto.trialblaze.api.contracts.message.mcib.v1.Order.toObject(includeInstance, f),
    filterList: jspb.Message.toObjectList(msg.getFilterList(),
    proto.trialblaze.api.contracts.message.mcib.v1.Filter.toObject, includeInstance),
    page: (f = msg.getPage()) && src_api_message_v1_common_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 2:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.Order;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.Order.deserializeBinaryFromReader);
      msg.setOrderby(value);
      break;
    case 3:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.Filter;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.Filter.deserializeBinaryFromReader);
      msg.addFilter(value);
      break;
    case 4:
      var value = new src_api_message_v1_common_pb.Pagination;
      reader.readMessage(value,src_api_message_v1_common_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderby();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.Order.serializeBinaryToWriter
    );
  }
  f = message.getFilterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.Filter.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      src_api_message_v1_common_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional string TrialId = 1;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Order OrderBy = 2;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.Order}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.getOrderby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.Order} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.Order, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.Order|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.setOrderby = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.clearOrderby = function() {
  this.setOrderby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.hasOrderby = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Filter Filter = 3;
 * @return {!Array<!proto.trialblaze.api.contracts.message.mcib.v1.Filter>}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.getFilterList = function() {
  return /** @type{!Array<!proto.trialblaze.api.contracts.message.mcib.v1.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.Filter, 3));
};


/** @param {!Array<!proto.trialblaze.api.contracts.message.mcib.v1.Filter>} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.setFilterList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.Filter}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.addFilter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.trialblaze.api.contracts.message.mcib.v1.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.clearFilterList = function() {
  this.setFilterList([]);
};


/**
 * optional trialblaze.api.contracts.message.v1.Pagination Page = 4;
 * @return {?proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.getPage = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.Pagination, 4));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.Pagination|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcib: (f = msg.getMcib()) && proto.trialblaze.api.contracts.message.mcib.v1.Mcib.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.Mcib;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.Mcib.deserializeBinaryFromReader);
      msg.setMcib(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcib();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.Mcib.serializeBinaryToWriter
    );
  }
};


/**
 * optional Mcib Mcib = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.Mcib}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.prototype.getMcib = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.Mcib} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.Mcib, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.Mcib|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.prototype.setMcib = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.prototype.clearMcib = function() {
  this.setMcib(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibsResponse.prototype.hasMcib = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    page: (f = msg.getPage()) && src_api_message_v1_common_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.Pagination;
      reader.readMessage(value,src_api_message_v1_common_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string TrialId = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.Pagination Page = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.getPage = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.Pagination, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.Pagination|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibhistory: (f = msg.getMcibhistory()) && proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.McibHistory;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.deserializeBinaryFromReader);
      msg.setMcibhistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibhistory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.McibHistory.serializeBinaryToWriter
    );
  }
};


/**
 * optional McibHistory McibHistory = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.McibHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.prototype.getMcibhistory = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.McibHistory} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.McibHistory, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.McibHistory|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.prototype.setMcibhistory = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.prototype.clearMcibhistory = function() {
  this.setMcibhistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetMcibHistoriesResponse.prototype.hasMcibhistory = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcib: (f = msg.getMcib()) && proto.trialblaze.api.contracts.message.mcib.v1.Mcib.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.Mcib;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.Mcib.deserializeBinaryFromReader);
      msg.setMcib(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcib();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.Mcib.serializeBinaryToWriter
    );
  }
};


/**
 * optional Mcib Mcib = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.Mcib}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.prototype.getMcib = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.Mcib} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.Mcib, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.Mcib|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.prototype.setMcib = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.prototype.clearMcib = function() {
  this.setMcib(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibRequest.prototype.hasMcib = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CreateMcibResponse.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    effectivefrom: msg.getEffectivefrom_asB64(),
    effectiveto: msg.getEffectiveto_asB64(),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectivefrom(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectiveto(value);
      break;
    case 5:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEffectivefrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEffectiveto_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string TrialId = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes EffectiveFrom = 3;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getEffectivefrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes EffectiveFrom = 3;
 * This is a type-conversion wrapper around `getEffectivefrom()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getEffectivefrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectivefrom()));
};


/**
 * optional bytes EffectiveFrom = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectivefrom()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getEffectivefrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectivefrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.setEffectivefrom = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes EffectiveTo = 4;
 * @return {!(string|Uint8Array)}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getEffectiveto = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes EffectiveTo = 4;
 * This is a type-conversion wrapper around `getEffectiveto()`
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getEffectiveto_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectiveto()));
};


/**
 * optional bytes EffectiveTo = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectiveto()`
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getEffectiveto_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectiveto()));
};


/** @param {!(string|Uint8Array)} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.setEffectiveto = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 5;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 5));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibRequest.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedmcib: (f = msg.getUpdatedmcib()) && proto.trialblaze.api.contracts.message.mcib.v1.Mcib.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.Mcib;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.Mcib.deserializeBinaryFromReader);
      msg.setUpdatedmcib(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedmcib();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.Mcib.serializeBinaryToWriter
    );
  }
};


/**
 * optional Mcib UpdatedMcib = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.Mcib}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.prototype.getUpdatedmcib = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.Mcib} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.Mcib, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.Mcib|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.prototype.setUpdatedmcib = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.prototype.clearUpdatedmcib = function() {
  this.setUpdatedmcib(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateMcibResponse.prototype.hasUpdatedmcib = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    page: (f = msg.getPage()) && src_api_message_v1_common_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.Pagination;
      reader.readMessage(value,src_api_message_v1_common_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string TrialId = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.Pagination Page = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.getPage = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.Pagination, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.Pagination|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    visitpricerange: (f = msg.getVisitpricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.deserializeBinaryFromReader);
      msg.setVisitpricerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisitpricerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional VisitPriceRange VisitPriceRange = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.prototype.getVisitpricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.prototype.setVisitpricerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.prototype.clearVisitpricerange = function() {
  this.setVisitpricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangesResponse.prototype.hasVisitpricerange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vdid: (f = msg.getVdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    page: (f = msg.getPage()) && src_api_message_v1_common_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVdid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 4:
      var value = new src_api_message_v1_common_pb.Pagination;
      reader.readMessage(value,src_api_message_v1_common_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVdid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      src_api_message_v1_common_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VdId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.getVdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.setVdid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.clearVdid = function() {
  this.setVdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.hasVdid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string TrialId = 3;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.Pagination Page = 4;
 * @return {?proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.getPage = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.Pagination, 4));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.Pagination|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    visitpricerangehistory: (f = msg.getVisitpricerangehistory()) && proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.deserializeBinaryFromReader);
      msg.setVisitpricerangehistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisitpricerangehistory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory.serializeBinaryToWriter
    );
  }
};


/**
 * optional VisitPriceRangeHistory VisitPriceRangeHistory = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.prototype.getVisitpricerangehistory = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRangeHistory|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.prototype.setVisitpricerangehistory = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.prototype.clearVisitpricerangehistory = function() {
  this.setVisitpricerangehistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitPriceRangeHistoriesResponse.prototype.hasVisitpricerangehistory = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    newvisitpricerange: (f = msg.getNewvisitpricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.deserializeBinaryFromReader);
      msg.setNewvisitpricerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewvisitpricerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional VisitPriceRange NewVisitPriceRange = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.prototype.getNewvisitpricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.prototype.setNewvisitpricerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.prototype.clearNewvisitpricerange = function() {
  this.setNewvisitpricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesRequest.prototype.hasNewvisitpricerange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newvisitpricerange: (f = msg.getNewvisitpricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.deserializeBinaryFromReader);
      msg.setNewvisitpricerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewvisitpricerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional VisitPriceRange NewVisitPriceRange = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.prototype.getNewvisitpricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.VisitPriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.prototype.setNewvisitpricerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.prototype.clearNewvisitpricerange = function() {
  this.setNewvisitpricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitPriceRangesResponse.prototype.hasNewvisitpricerange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vdid: (f = msg.getVdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVdid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVdid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VdId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.getVdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.setVdid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.clearVdid = function() {
  this.setVdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.hasVdid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string TrialId = 3;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newprocedurepricerange: (f = msg.getNewprocedurepricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.deserializeBinaryFromReader);
      msg.setNewprocedurepricerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewprocedurepricerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedurePriceRange NewProcedurePriceRange = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.prototype.getNewprocedurepricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.prototype.setNewprocedurepricerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.prototype.clearNewprocedurepricerange = function() {
  this.setNewprocedurepricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangesResponse.prototype.hasNewprocedurepricerange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    vpdid: (f = msg.getVpdid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    page: (f = msg.getPage()) && src_api_message_v1_common_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setVpdid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 4:
      var value = new src_api_message_v1_common_pb.Pagination;
      reader.readMessage(value,src_api_message_v1_common_pb.Pagination.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getVpdid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      src_api_message_v1_common_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID VpdId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.getVpdid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.setVpdid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.clearVpdid = function() {
  this.setVpdid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.hasVpdid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string TrialId = 3;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.Pagination Page = 4;
 * @return {?proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.getPage = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.Pagination} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.Pagination, 4));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.Pagination|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedurepricerangehistory: (f = msg.getProcedurepricerangehistory()) && proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.deserializeBinaryFromReader);
      msg.setProcedurepricerangehistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedurepricerangehistory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedurePriceRangeHistory ProcedurePriceRangeHistory = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.prototype.getProcedurepricerangehistory = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRangeHistory|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.prototype.setProcedurepricerangehistory = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.prototype.clearProcedurepricerangehistory = function() {
  this.setProcedurepricerangehistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.GetVisitProcedurePriceRangeHistoriesResponse.prototype.hasProcedurepricerangehistory = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    newprocedurepricerange: (f = msg.getNewprocedurepricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.deserializeBinaryFromReader);
      msg.setNewprocedurepricerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewprocedurepricerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedurePriceRange NewProcedurePriceRange = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.prototype.getNewprocedurepricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.prototype.setNewprocedurepricerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.prototype.clearNewprocedurepricerange = function() {
  this.setNewprocedurepricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesRequest.prototype.hasNewprocedurepricerange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newprocedurepricerange: (f = msg.getNewprocedurepricerange()) && proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.deserializeBinaryFromReader);
      msg.setNewprocedurepricerange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewprocedurepricerange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedurePriceRange NewProcedurePriceRange = 1;
 * @return {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.prototype.getNewprocedurepricerange = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.mcib.v1.ProcedurePriceRange|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.prototype.setNewprocedurepricerange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.prototype.clearNewprocedurepricerange = function() {
  this.setNewprocedurepricerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.UpdateVisitProcedurePriceRangesResponse.prototype.hasNewprocedurepricerange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string TrialId = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibRequest.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.StartReviewMcibResponse.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string TrialId = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewRequest.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.CancelMcibReviewResponse.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f),
    trialid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedby: (f = msg.getUpdatedby()) && src_api_message_v1_common_pb.UserRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest;
  return proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 3:
      var value = new src_api_message_v1_common_pb.UserRef;
      reader.readMessage(value,src_api_message_v1_common_pb.UserRef.deserializeBinaryFromReader);
      msg.setUpdatedby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedby();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      src_api_message_v1_common_pb.UserRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string TrialId = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional trialblaze.api.contracts.message.v1.UserRef UpdatedBy = 3;
 * @return {?proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.getUpdatedby = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UserRef} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UserRef, 3));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UserRef|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.setUpdatedby = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.clearUpdatedby = function() {
  this.setUpdatedby(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibRequest.prototype.hasUpdatedby = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcibid: (f = msg.getMcibid()) && src_api_message_v1_common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse;
  return proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_api_message_v1_common_pb.UUID;
      reader.readMessage(value,src_api_message_v1_common_pb.UUID.deserializeBinaryFromReader);
      msg.setMcibid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcibid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_api_message_v1_common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional trialblaze.api.contracts.message.v1.UUID McibId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.prototype.getMcibid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, src_api_message_v1_common_pb.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.prototype.setMcibid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.prototype.clearMcibid = function() {
  this.setMcibid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.mcib.v1.PublishMcibResponse.prototype.hasMcibid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.OrderColumns = {
  TRIAL: 0,
  NAME: 1,
  TIME: 2,
  COUNTRY: 3,
  CURRENCY: 4
};

/**
 * @enum {number}
 */
proto.trialblaze.api.contracts.message.mcib.v1.FilterColumns = {
  NO_FILTER: 0,
  TRIAL_ALIAS: 1,
  MCIB_NAME: 2,
  USERNAME: 3,
  USER_ID: 4,
  COUNTRY_ID: 5,
  CURRENCY_ID: 6,
  STATUS: 7,
  MCIB_ID: 8
};

goog.object.extend(exports, proto.trialblaze.api.contracts.message.mcib.v1);
