/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.CountryRef', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.CurrencyRef', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.FilterOperation', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.ObjectType', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.Pagination', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.Status', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.StudyRef', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.UUID', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.UserRef', null, global);
goog.exportSymbol('proto.trialblaze.api.contracts.message.v1.WorkflowRef', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.UUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.UUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.UUID.displayName = 'proto.trialblaze.api.contracts.message.v1.UUID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.Pagination.displayName = 'proto.trialblaze.api.contracts.message.v1.Pagination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.UserRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.UserRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.UserRef.displayName = 'proto.trialblaze.api.contracts.message.v1.UserRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.StudyRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.StudyRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.StudyRef.displayName = 'proto.trialblaze.api.contracts.message.v1.StudyRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.CountryRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.CountryRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.CountryRef.displayName = 'proto.trialblaze.api.contracts.message.v1.CountryRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.CurrencyRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.CurrencyRef.displayName = 'proto.trialblaze.api.contracts.message.v1.CurrencyRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trialblaze.api.contracts.message.v1.WorkflowRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trialblaze.api.contracts.message.v1.WorkflowRef.displayName = 'proto.trialblaze.api.contracts.message.v1.WorkflowRef';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.UUID.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.UUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.UUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.UUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.v1.UUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.UUID;
  return proto.trialblaze.api.contracts.message.v1.UUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.UUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.v1.UUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.UUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.UUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.UUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.UUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.UUID.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.UUID.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.v1.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.Pagination;
  return proto.trialblaze.api.contracts.message.v1.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.Pagination}
 */
proto.trialblaze.api.contracts.message.v1.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 Limit = 1;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.v1.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.v1.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Offset = 2;
 * @return {number}
 */
proto.trialblaze.api.contracts.message.v1.Pagination.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.trialblaze.api.contracts.message.v1.Pagination.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.UserRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.UserRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.UserRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: (f = msg.getUserid()) && proto.trialblaze.api.contracts.message.v1.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.UserRef;
  return proto.trialblaze.api.contracts.message.v1.UserRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.UserRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.UserRef}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = new proto.trialblaze.api.contracts.message.v1.UUID;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.v1.UUID.deserializeBinaryFromReader);
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.UserRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.UserRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.UserRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trialblaze.api.contracts.message.v1.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Username = 1;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UUID UserId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.getUserid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.v1.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.setUserid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.clearUserid = function() {
  this.setUserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.v1.UserRef.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.StudyRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.StudyRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    trialid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    trialalias: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.StudyRef;
  return proto.trialblaze.api.contracts.message.v1.StudyRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.StudyRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.StudyRef}
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrialalias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.StudyRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.StudyRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrialid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTrialalias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string TrialId = 1;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.prototype.getTrialid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.StudyRef.prototype.setTrialid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string TrialAlias = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.StudyRef.prototype.getTrialalias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.StudyRef.prototype.setTrialalias = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.CountryRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.CountryRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.CountryRef}
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.CountryRef;
  return proto.trialblaze.api.contracts.message.v1.CountryRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.CountryRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.CountryRef}
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.CountryRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.CountryRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.CountryRef.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.CountryRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.CountryRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.CurrencyRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.CurrencyRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.CurrencyRef}
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.CurrencyRef;
  return proto.trialblaze.api.contracts.message.v1.CurrencyRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.CurrencyRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.CurrencyRef}
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.CurrencyRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.CurrencyRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.trialblaze.api.contracts.message.v1.CurrencyRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.toObject = function(opt_includeInstance) {
  return proto.trialblaze.api.contracts.message.v1.WorkflowRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trialblaze.api.contracts.message.v1.WorkflowRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectid: (f = msg.getObjectid()) && proto.trialblaze.api.contracts.message.v1.UUID.toObject(includeInstance, f),
    workflowid: (f = msg.getWorkflowid()) && proto.trialblaze.api.contracts.message.v1.UUID.toObject(includeInstance, f),
    objecttype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trialblaze.api.contracts.message.v1.WorkflowRef}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trialblaze.api.contracts.message.v1.WorkflowRef;
  return proto.trialblaze.api.contracts.message.v1.WorkflowRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trialblaze.api.contracts.message.v1.WorkflowRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trialblaze.api.contracts.message.v1.WorkflowRef}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trialblaze.api.contracts.message.v1.UUID;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.v1.UUID.deserializeBinaryFromReader);
      msg.setObjectid(value);
      break;
    case 2:
      var value = new proto.trialblaze.api.contracts.message.v1.UUID;
      reader.readMessage(value,proto.trialblaze.api.contracts.message.v1.UUID.deserializeBinaryFromReader);
      msg.setWorkflowid(value);
      break;
    case 3:
      var value = /** @type {!proto.trialblaze.api.contracts.message.v1.ObjectType} */ (reader.readEnum());
      msg.setObjecttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trialblaze.api.contracts.message.v1.WorkflowRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trialblaze.api.contracts.message.v1.WorkflowRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trialblaze.api.contracts.message.v1.UUID.serializeBinaryToWriter
    );
  }
  f = message.getWorkflowid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trialblaze.api.contracts.message.v1.UUID.serializeBinaryToWriter
    );
  }
  f = message.getObjecttype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional UUID ObjectId = 1;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.getObjectid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.v1.UUID, 1));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.setObjectid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.clearObjectid = function() {
  this.setObjectid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.hasObjectid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID WorkflowId = 2;
 * @return {?proto.trialblaze.api.contracts.message.v1.UUID}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.getWorkflowid = function() {
  return /** @type{?proto.trialblaze.api.contracts.message.v1.UUID} */ (
    jspb.Message.getWrapperField(this, proto.trialblaze.api.contracts.message.v1.UUID, 2));
};


/** @param {?proto.trialblaze.api.contracts.message.v1.UUID|undefined} value */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.setWorkflowid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.clearWorkflowid = function() {
  this.setWorkflowid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.hasWorkflowid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ObjectType ObjectType = 3;
 * @return {!proto.trialblaze.api.contracts.message.v1.ObjectType}
 */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.getObjecttype = function() {
  return /** @type {!proto.trialblaze.api.contracts.message.v1.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.trialblaze.api.contracts.message.v1.ObjectType} value */
proto.trialblaze.api.contracts.message.v1.WorkflowRef.prototype.setObjecttype = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.trialblaze.api.contracts.message.v1.FilterOperation = {
  LIKE: 0,
  EQUAL: 1
};

/**
 * @enum {number}
 */
proto.trialblaze.api.contracts.message.v1.Status = {
  EDITING: 0,
  IN_REVIEW: 1,
  APPROVED: 2,
  REJECTED: 3,
  CANCELED: 4,
  SIGNED: 5,
  PUBLISHED: 6
};

/**
 * @enum {number}
 */
proto.trialblaze.api.contracts.message.v1.ObjectType = {
  MCIB: 0,
  SIB: 1,
  CONTRACT: 2
};

goog.object.extend(exports, proto.trialblaze.api.contracts.message.v1);
